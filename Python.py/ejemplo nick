class Controller:

UP = 1
IDLE = 0
DOWN = -1

def __init__(self, number_of_floor, nb_elevators):
    self.number:of:floors = number_of_floors
    self.nb_elevators = nb_elevators
    self.elevatorList= []
for x in range(nb_elevators):
    self.elevatorsLIst.append(Elevator("Elevator"+str (x+1),"Idle",2, "GoingNowhere"[None]))
    self.elevatorList[x]
def RequestElevator (self, floor_Number, wanted_direction):
    print("I want to go" + str(direction) +
    ".I am on floor " รง str(Floor_Number))
elevatorNumber  = self.FindElevator(floor_number, direction)
    self.elevatorList[elevatorNumber].addFloorToList(Floor_number)

def FindElevator(self, target_floor_number, wanted_direction):
    print("FindElevator")
    return 0

def run(self):
    while True
    for e in self.elevatorList:
        e.run()
        sleep(1)

class Elevator:
def __init__(self, id, floors):
    self.id = id
    self.floors =floors
    self.floorList = []
for x in range(floors):
    self.floorList.fill(False)

def addFloorToList(self, floor):
    self.floorList[Floor] = True

def run(self):
    while True
    print("Eval", self.id)
    sleep (5)

def run(self):
   for l in range (self.FloorList)
   if self.FloorList[1] = True:
   print("wow", str(l))

def allo(self):
controller = Controller (11, 2)
    print(controller.__dict__)  :

for e in controller.elevatorList:
    print(e.___dict___)

controller.RequestElevator(5, DOWN)
allo()


def laura:
def fname(arg):
    pass
